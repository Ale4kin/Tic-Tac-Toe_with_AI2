type: edu
custom_name: stage2
files:
- name: src/tictactoe/Main.java
  visible: true
  text: |
    package tictactoe;

    import java.util.Scanner;

    public class Main {
        public static void main(String[] args) {

            Scanner scanner = new Scanner (System.in);

            System.out.println ("Enter the cells:");

            String input = scanner.nextLine ().replaceAll ("> ", "").replaceAll ("_", " ");

            char[][] arr = new char[3][3];
            arr[0][0] = input.charAt (0);
            arr[0][1] = input.charAt (1);
            arr[0][2] = input.charAt (2);
            arr[1][0] = input.charAt (3);
            arr[1][1] = input.charAt (4);
            arr[1][2] = input.charAt (5);
            arr[2][0] = input.charAt (6);
            arr[2][1] = input.charAt (7);
            arr[2][2] = input.charAt (8);

            printGameField (arr);

            System.out.println ("Enter the coordinates:");

            boolean finished = false;

            while (!finished) {

                String xy = scanner.nextLine ();

                int x = getX (xy);
                int y = getY (xy);

                int countX = 0;
                int countO = 0;

                for (int i = 0; i < input.length (); i++) {
                    if (input.charAt (i) == 'X') {
                        countX++;
                    } else if (input.charAt (i) == 'O') {
                        countO++;
                    }
                }


                if (arr[x][y] == 'X' || arr[x][y] == 'O') {
                    System.out.println ("This cell is occupied! Choose another one!");
                } else if (arr[x][y] == ' ') {
                    XorO (arr, x, y, countX, countO);
                    if (isWin (arr, countX, countO)) {

                        finished = true;

                    }else  {
                        continue;
                    }

                    }




                }


            }

        public static void XorO(char[][] arr, int x, int y, int countX, int countO) {
            if (countX == countO) {
                arr[x][y] = 'X';
            } else if (countX > countO) {
                arr[x][y] = 'O';
            }
        }


        private static boolean isWin(char[][] arr, int countX, int countO) {
            if (arr[0][0] == 'X' && arr[0][1] == 'X' && arr[0][2] == 'X') {
                printGameField (arr);
                System.out.println ("X wins");

            } else if (arr[1][0] == 'X' && arr[1][1] == 'X' && arr[1][2] == 'X') {
                printGameField (arr);
                System.out.println ("X wins");

            } else if (arr[2][0] == 'X' && arr[2][1] == 'X' && arr[2][2] == 'X') {
                printGameField (arr);
                System.out.println ("X wins");

            } else if (arr[1][0] == 'X' && arr[1][1] == 'X' && arr[2][2] == 'X') {
                printGameField (arr);
                System.out.println ("X wins");

            } else if (arr[0][1] == 'X' && arr[1][1] == 'X' && arr[2][1] == 'X') {
                printGameField (arr);
                System.out.println ("X wins");

            } else if (arr[0][2] == 'X' && arr[1][2] == 'X' && arr[2][2] == 'X') {
                printGameField (arr);
                System.out.println ("X wins");

            }else if (arr[0][0] == 'X' && arr[1][1] == 'X' && arr[2][2] == 'X') {
                printGameField (arr);
                System.out.println ("X wins");

            }else if (arr[0][2] == 'X' && arr[1][1] == 'X' && arr[2][0] == 'X') {
                printGameField (arr);
                System.out.println ("X wins");

            } else if (arr[0][0] == 'O' && arr[0][1] == 'O' && arr[0][2] == 'O') {
                printGameField (arr);
                System.out.println ("O wins");

            } else if (arr[1][0] == 'O' && arr[1][1] == 'O' && arr[1][2] == 'O') {
                printGameField (arr);
                System.out.println ("O wins");

            } else if (arr[2][0] == 'O' && arr[2][1] == 'O' && arr[2][2] == 'O') {
                printGameField (arr);
                System.out.println ("O wins");

            } else if (arr[0][0] == 'O' && arr[1][0] == 'O' && arr[2][0] == 'O') {
                printGameField (arr);
                System.out.println ("O wins");

            } else if (arr[1][0] == 'O' && arr[1][1] == 'O' && arr[2][1] == 'O') {
                printGameField (arr);
                System.out.println ("O wins");

            } else if (arr[2][2] == 'O' && arr[1][2] == 'O' && arr[0][2] == 'O') {
                printGameField (arr);
                System.out.println ("O wins");

            } else if (arr[0][0] == 'O' && arr[1][1] == 'O' && arr[2][2] == 'O') {
                printGameField (arr);
                System.out.println ("O wins");

             }else if (arr[0][2] == 'O' && arr[1][1] == 'O' && arr[2][0] == 'O') {
                printGameField (arr);
                System.out.println ("O wins");

            } else if ((countO + countX) < 9) {
                printGameField (arr);
                System.out.println ("Game not finished");

            } else {
                printGameField (arr);
                System.out.println ("Draw");

            }
            return true;
        }


        public static void printGameField(char[][] arr) {
            System.out.println ("---------");
            System.out.println ("|" + " " + arr[0][0] + " " + arr[0][1] + " " + arr[0][2] + " " + "|");
            System.out.println ("|" + " " + arr[1][0] + " " + arr[1][1] + " " + arr[1][2] + " " + "|");
            System.out.println ("|" + " " + arr[2][0] + " " + arr[2][1] + " " + arr[2][2] + " " + "|");
            System.out.println ("---------");
        }


        public static int getX(String s) {
            int x = 0;
            if(s.contains (" ")) {
                String[] str = s.split (" ");
                if ("1".equals (str[0])) {
                    x = 0;
                } else if ("2".equals (str[0])) {
                    x = 1;
                } else if ("3".equals (str[0])) {
                    x = 2;
                } else if (!(str[0].matches ("-?\\d+")) || !(str[1].matches ("-?\\d+"))) {
                    System.out.println ("You should enter numbers!");
                    System.out.println ("Enter the coordinates:");
                } else {
                    System.out.println ("Coordinates should be from 1 to 3!");
                    System.out.println ("Enter the coordinates:");
                }
            }else {
                System.out.println ("You should enter numbers!");
                System.out.println ("Enter the coordinates:");
            }


            return x;
        }

        public static int getY(String s) {
            int y = 0;
            if(s.contains (" ")) {
                String[] str = s.split (" ");

                if ("1".equals (str[1])) {
                    y = 0;
                } else if ("2".equals (str[1])) {
                    y = 1;
                } else if ("3".equals (str[1])) {
                    y = 2;
                } else if (!(str[1].matches ("-?\\d+")) || !(str[0].matches ("-?\\d+"))) {
                    System.out.println ("You should enter numbers!");
                    System.out.println ("Enter the coordinates:");
                } else {
                    System.out.println ("Coordinates should be from 1 to 3!");
                    System.out.println ("Enter the coordinates:");
                }
            } else {
                System.out.println ("You should enter numbers!");
                System.out.println ("Enter the coordinates:");
            }


            return y;
        }


    }
  learner_created: false
- name: test/TicTacToeTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;


    public class TicTacToeTest extends StageTest<String> {

        int[] easyAiMoves = new int[9];

        @DynamicTest(order = 1)
        CheckResult testGridOutput() {

            TestedProgram program = new TestedProgram();

            String output = program.start();

            Grid printedGrid = Grid.fromOutput(output);
            Grid emptyGrid = Grid.fromLine("_________");

            if (!printedGrid.equals(emptyGrid)) {
                return CheckResult.wrong("After starting the program you should print an empty grid!\n" +
                    "Correct empty grid:\n" + emptyGrid);
            }

            if (!output.toLowerCase().contains("enter the coordinates:")) {
                return CheckResult.wrong("After printing an empty grid you should ask to enter cell coordinates!");
            }

            output = program.execute("2 2");

            Grid gridAfterMove = Grid.fromOutput(output);
            Grid correctGridAfterMove = Grid.fromLine("____X____");

            if (!gridAfterMove.equals(correctGridAfterMove)) {
                return CheckResult.wrong("After making the move wrong grid was printed.\n" +
                    "Your grid:\n" + gridAfterMove + "\n" +
                    "Correct grid:\n" + correctGridAfterMove);
            }



            if (!output.toLowerCase().replace("'", "\"") .contains("making move level \"easy\"")) {
                return CheckResult.wrong("After entering a cell coordinates you should print:\nMaking move level \"easy\"");
            }

            Grid gridAfterAiMove = Grid.fromOutput(output, 2);

            if (gridAfterAiMove.equals(gridAfterMove)) {
                return CheckResult.wrong("After AI move grid wasn't changed!");
            }

            Grid gameGrid = gridAfterAiMove;

            while (true) {
                if (gameGrid.getGameState() != GameState.NOT_FINISHED) {
                    switch (gameGrid.getGameState()) {
                        case X_WIN:
                            if (!output.contains("X wins")) {
                                return CheckResult.wrong("You should print 'X wins' if X win the game");
                            }
                            break;
                        case O_WIN:
                            if (!output.contains("O wins")) {
                                return CheckResult.wrong("You should print 'O wins' if O win the game");
                            }
                            break;
                        case DRAW:
                            if (!output.contains("Draw")) {
                                return CheckResult.wrong("You should print 'Draw' if the game ends with draw!");
                            }
                            break;
                    }
                    break;
                }
                Position nextMove = Minimax.getMove(gameGrid, CellState.X);

                Grid tempGrid = gameGrid.copy();
                tempGrid.setCell(nextMove.x, nextMove.y, CellState.X);

                output = program.execute((nextMove.x + 1) + " " + (nextMove.y + 1));

                gameGrid = Grid.fromOutput(output);

                if (!gameGrid.equals(tempGrid)) {
                    return CheckResult.wrong("After making move (" + nextMove + ") the game grid is wrong!\n" +
                        "Your gird\n" + gameGrid + "\n" +
                        "Correct grid\n" + tempGrid);
                }

                if (gameGrid.getGameState() != GameState.NOT_FINISHED)
                    continue;

                gameGrid = Grid.fromOutput(output, 2);
            }

            return CheckResult.correct();
        }

        @DynamicTest(repeat = 100, order = 2)
        CheckResult checkEasyAi() {
            TestedProgram program = new TestedProgram();
            program.start();

            String output = program.execute("2 2");

            Grid gridAfterAiMove = Grid.fromOutput(output, 2);

            CellState[][] array = gridAfterAiMove.getGrid();

            for (int i = 0; i < 9; i++) {
                if (i == 4) {
                    continue;
                }
                if (array[i / 3][i % 3] == CellState.O) {
                    easyAiMoves[i]++;
                }
            }

            return CheckResult.correct();
        }

        @DynamicTest(order = 3)
        CheckResult checkRandom() {
            double averageScore = 0;

            for (int i = 0; i < easyAiMoves.length; i++) {
                averageScore += (i + 1) * easyAiMoves[i];
            }

            averageScore /= 8;

            double expectedValue = (double) (1 + 2 + 3 + 4 + 6 + 7 + 8 + 9) * 100 / 8 / 8;

            if (Math.abs(averageScore - expectedValue) > 20) {
                return CheckResult.wrong("Looks like your Easy level AI doesn't make a random move!");
            }

            return CheckResult.correct();
        }

        boolean isEasyNotMovingLikeMedium = false;

        @DynamicTest(repeat = 30, order = 4)
        CheckResult checkEasyNotMovingLikeMedium() {

            if (isEasyNotMovingLikeMedium) {
                return CheckResult.correct();
            }

            TestedProgram program = new TestedProgram();
            program.start();
            program.execute("start user easy");

            String output = program.execute("2 2");

            Grid gameGrid = Grid.fromOutput(output, 2);

            CellState[][] cellStates = gameGrid.getGrid();

            if (cellStates[0][0] == CellState.EMPTY && cellStates[2][2] == CellState.EMPTY) {
                output = program.execute("1 1");
                gameGrid = Grid.fromOutput(output, 2);
                if (gameGrid.getGrid()[2][2] == CellState.EMPTY) {
                    isEasyNotMovingLikeMedium = true;
                }
            } else {
                output = program.execute("1 3");
                gameGrid = Grid.fromOutput(output, 2);
                if (gameGrid.getGrid()[2][0] == CellState.EMPTY) {
                    isEasyNotMovingLikeMedium = true;
                }
            }

            program.stop();
            return CheckResult.correct();
        }

        @DynamicTest(order = 5)
        CheckResult checkEasyNotMovingLikeMediumAfter() {
            if (!isEasyNotMovingLikeMedium) {
                return CheckResult.wrong("Looks like your Easy level AI doesn't make a random move!");
            }
            return CheckResult.correct();
        }
    }
  learner_created: false
feedback_link: https://hyperskill.org/projects/81/stages/448/implement#comment
status: Solved
record: 1
