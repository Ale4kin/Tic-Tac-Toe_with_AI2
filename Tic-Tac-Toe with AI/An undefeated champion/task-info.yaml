type: edu
custom_name: stage5
files:
- name: src/tictactoe/Main.java
  visible: true
  text: |
    package tictactoe;

    import java.util.Scanner;
    import java.util.Random;

    public class Main {
        public static void main(String[] args) {

            Scanner scanner = new Scanner (System.in);

            int free = 9;

            boolean gameOver = false;

            while(!gameOver) {

                System.out.println ("Input command:");

                String inputCommand = scanner.nextLine ().replaceAll ("> ", "");

                if ("start easy easy".equals(inputCommand)) {

                    char[][] arr = getGameField ();

                    printGameField (arr);

                    boolean player1 = true;

                    boolean finished = false;

                    while (!finished) {
                        System.out.println ("Making move level \"easy\"");

                        int rand1;
                        int rand2;

                        rand1 = (int) (Math.random () * 3);
                        rand2 = (int) (Math.random () * 3);

                        if (rand1 > 2 || rand2 > 2 || rand1 < 0 || rand2 < 0) {
                            continue;
                        }

                        if (arr[rand1][rand2] != ' ') {
                            continue;
                        }

                        char c;
                        if(player1) {
                            c = 'X';
                            player1 = false;
                            free = free - 1;
                        } else {
                            c = 'O';
                            player1 = true;
                            free = free - 1;
                        }

                        arr[rand1][rand2] = c;
                        free = free - 1;

                        printGameField (arr);

                        finished = hasWon (free, arr, finished);


                    }

                    continue;
                }

                    if("start easy user".equals (inputCommand)){

                    char[][] arr = getGameField ();

                    printGameField (arr);

                    boolean finished = false;

                    while (!finished) {
                        System.out.println ("Making move level \"easy\"");

                        int rand1;
                        int rand2;

                        rand1 = (int) (Math.random () * 3);
                        rand2 = (int) (Math.random () * 3);

                        arr[rand1][rand2] = 'X';
                        free = free - 1;

                        printGameField (arr);

                        finished = hasWon (free, arr, finished);

                        System.out.println ("Enter the coordinates:");

                        String input = scanner.nextLine ().replaceAll ("> ", "").replaceAll ("_", " ");

                        int row = getX (input);
                        int column = getY (input);

                        if (row > 2 || column > 2 || row < 0 || column < 0) {
                            System.out.println ("Coordinates should be from 1 to 3!");
                            continue;
                        }

                        if (arr[row][column] != ' ') {
                            System.out.println ("This cell is occupied! Choose another one!");
                            continue;
                        }


                        arr[row][column] = 'O';
                        free = free - 1;

                        printGameField (arr);

                        // проверяем на победу

                        finished = hasWon (free, arr, finished);


                    }

                    continue;
                }

                   if ("start user easy".equals (inputCommand)) {

                    char[][] arr = getGameField ();

                    printGameField (arr);


                    boolean finished = false;

                    while (!finished) {


                        System.out.println ("Enter the coordinates:");

                        String input = scanner.nextLine ().replaceAll ("> ", "").replaceAll ("_", " ");

                        int row = getX (input);
                        int column = getY (input);

                        if (row > 2 || column > 2 || row < 0 || column < 0) {
                            System.out.println ("Coordinates should be from 1 to 3!");
                            continue;
                        }

                        if (arr[row][column] != ' ') {
                            System.out.println ("This cell is occupied! Choose another one!");
                            continue;
                        }


                        arr[row][column] = 'X';
                        free = free - 1;

                        printGameField (arr);

                        // проверяем на победу

                        finished = hasWon (free, arr, finished);


                        System.out.println ("Making move level \"easy\"");

                        int rand1;
                        int rand2;

                        rand1 = (int) (Math.random () * 3);
                        rand2 = (int) (Math.random () * 3);

                        arr[rand1][rand2] = 'O';
                        free = free - 1;

                        printGameField (arr);

                        finished = hasWon (free, arr, finished);

                    }

                    continue;
                }

                    if ("start user user".equals (inputCommand)){

                    char[][] arr = getGameField ();
                    boolean player1 = true;

                    printGameField (arr);

                    boolean finished = false;

                    while (!finished) {
                        System.out.print ("Enter the coordinates: ");
                        String input = scanner.nextLine ().replaceAll ("> ", "").replaceAll ("_", " ");

                        int row = getX (input);
                        int column = getY (input);

                        if (row > 2 || column > 2 || row < 0 || column < 0) {
                            System.out.println ("Coordinates should be from 1 to 3!");
                            continue;
                        }

                        if (arr[row][column] != ' ') {
                            System.out.println ("This cell is occupied! Choose another one!");
                            continue;
                        }

                        // ставим

                        char c;
                        if (player1) {
                            c = 'X';
                            player1 = false;
                            free = free - 1;
                        } else {
                            c = 'O';
                            player1 = true;
                            free = free - 1;
                        }

                        arr[row][column] = c;

                        printGameField (arr);

                        // проверяем на победу

                        finished = hasWon (free, arr, finished);

                    }
                    continue;
                }

                    if ("start medium user".equals (inputCommand)) {
                        char[][] arr = getGameField ();

                        printGameField (arr);

                        boolean finished = false;

                        while (!finished) {
                            System.out.println ("Making move level \"medium\"");

                            int rand1;
                            int rand2;

                            if ((arr[0][0] == 'X' && arr[0][1] == 'X') || (arr[2][0] == 'X' && arr[1][1] == 'X') || arr[2][2] == 'X' && arr[1][2] == 'X' || (arr[0][0] == 'O' && arr[0][1] == 'O') || (arr[2][0] == 'O' && arr[1][1] == 'O') || arr[2][2] == 'O' && arr[1][2] == 'O'){
                                rand1 = 0;
                                rand2 = 2;
                                arr[rand1][rand2] = 'X';
                                free = free - 1;

                                printGameField (arr);

                                finished = hasWon (free, arr, finished);

                            }else if (arr[1][0] == 'X' && arr[1][1] == 'X' || arr[0][2] == 'X' && arr[2][0] == 'X' || arr[1][0] == 'O' && arr[1][1] == 'O' || arr[0][2] == 'O' && arr[2][0] == 'O'){
                                rand1 = 1;
                                rand2 = 2;
                                arr[rand1][rand2] = 'X';
                                free = free - 1;

                                printGameField (arr);

                                finished = hasWon (free, arr, finished);
                            }else if (arr[2][0] == 'X' && arr[2][1] == 'X' || arr[0][0] == 'X' && arr[1][1] == 'X' || arr[0][2] == 'X' && arr[1][2] == 'X' || arr[2][0] == 'O' && arr[2][1] == 'O' || arr[0][0] == 'O' && arr[1][1] == 'O' || arr[0][2] == 'O' && arr[1][2] == 'O'){
                                rand1 = 2;
                                rand2 = 2;
                                arr[rand1][rand2] = 'X';
                                free = free - 1;

                                printGameField (arr);

                                finished = hasWon (free, arr, finished);
                            }else if (arr[2][0] == 'X' && arr[2][2] == 'X' || arr[0][1] == 'X' && arr[1][1] == 'X' || arr[2][0] == 'O' && arr[2][2] == 'O' || arr[0][1] == 'O' && arr[1][1] == 'O'){
                                rand1 = 2;
                                rand2 = 1;
                                arr[rand1][rand2] = 'X';
                                free = free - 1;

                                printGameField (arr);

                                finished = hasWon (free, arr, finished);
                            }else if (arr[1][0] == 'X' && arr[1][2] == 'X' || arr[0][1] == 'X' && arr[2][1] == 'X' || arr[0][0] == 'X' && arr[2][2] == 'X' || arr[1][0] == 'O' && arr[1][2] == 'O' || arr[0][1] == 'O' && arr[2][1] == 'O' || arr[0][0] == 'O' && arr[2][2] == 'O'){
                                rand1 = 1;
                                rand2 = 1;
                                arr[rand1][rand2] = 'X';
                                free = free - 1;

                                printGameField (arr);

                                finished = hasWon (free, arr, finished);
                            }else if (arr[0][0] == 'X' && arr[0][2] == 'X' || arr[1][1] == 'X' && arr[2][1] == 'X' || arr[0][0] == 'O' && arr[0][2] == 'O' || arr[1][1] == 'O' && arr[2][1] == 'O'){
                                rand1 = 0;
                                rand2 = 1;
                                arr[rand1][rand2] = 'X';
                                free = free - 1;

                                printGameField (arr);

                                finished = hasWon (free, arr, finished);
                            }else if(arr[0][1] == 'X' && arr[0][2] == 'X' || arr[1][0] == 'X' && arr[2][0] == 'X' || arr[1][1] == 'X' && arr[2][2] == 'X' || arr[0][1] == 'O' && arr[0][2] == 'O' || arr[1][0] == 'O' && arr[2][0] == 'O' || arr[1][1] == 'O' && arr[2][2] == 'O'){
                                rand1 = 0;
                                rand2 = 0;
                                arr[rand1][rand2] = 'X';
                                free = free - 1;

                                printGameField (arr);

                                finished = hasWon (free, arr, finished);
                            }else if (arr[0][0] == 'X' && arr[2][0] == 'X' || arr[1][1] == 'X' && arr[1][2] == 'X' || arr[0][0] == 'O' && arr[2][0] == 'O' || arr[1][1] == 'O' && arr[1][2] == 'O'){
                                rand1 = 1;
                                rand2 = 0;
                                arr[rand1][rand2] = 'X';
                                free = free - 1;

                                printGameField (arr);

                                finished = hasWon (free, arr, finished);
                            }else if (arr[0][0] == 'X' && arr[1][0] == 'X' || arr[2][1] == 'X' && arr[2][2] == 'X' || arr[0][2] == 'X' && arr[1][1] == 'X' || arr[0][0] == 'O' && arr[1][0] == 'O' || arr[2][1] == 'O' && arr[2][2] == 'O' || arr[0][2] == 'O' && arr[1][1] == 'O'){
                                rand1 = 2;
                                rand2 = 0;
                                arr[rand1][rand2] = 'X';
                                free = free - 1;

                                printGameField (arr);

                                finished = hasWon (free, arr, finished);
                            } else {

                                rand1 = (int) (Math.random () * 3);
                                rand2 = (int) (Math.random () * 3);

                                arr[rand1][rand2] = 'X';
                                free = free - 1;

                                printGameField (arr);

                                finished = hasWon (free, arr, finished);
                            }

                            System.out.println ("Enter the coordinates:");

                            String input = scanner.nextLine ().replaceAll ("> ", "").replaceAll ("_", " ");

                            int row = getX (input);
                            int column = getY (input);

                            if (row > 2 || column > 2 || row < 0 || column < 0) {
                                System.out.println ("Coordinates should be from 1 to 3!");
                                continue;
                            }

                            if (arr[row][column] != ' ') {
                                System.out.println ("This cell is occupied! Choose another one!");
                                continue;
                            }


                            arr[row][column] = 'O';
                            free = free - 1;

                            printGameField (arr);

                            // проверяем на победу

                            finished = hasWon (free, arr, finished);


                        }

                        continue;

                    }

                if ("start user medium".equals (inputCommand)){

                    char[][] arr = getGameField ();

                    printGameField (arr);


                    boolean finished = false;

                    while (!finished) {


                        System.out.println ("Enter the coordinates:");

                        String input = scanner.nextLine ().replaceAll ("> ", "").replaceAll ("_", " ");

                        int row = getX (input);
                        int column = getY (input);

                        if (row > 2 || column > 2 || row < 0 || column < 0) {
                            System.out.println ("Coordinates should be from 1 to 3!");
                            continue;
                        }

                        if (arr[row][column] != ' ') {
                            System.out.println ("This cell is occupied! Choose another one!");
                            continue;
                        }


                        arr[row][column] = 'X';
                        free = free - 1;

                        printGameField (arr);

                        // проверяем на победу

                        finished = hasWon (free, arr, finished);


                        System.out.println ("Making move level \"medium\"");

                        int rand1;
                        int rand2;

                        if ((arr[0][0] == 'X' && arr[0][1] == 'X') || (arr[2][0] == 'X' && arr[1][1] == 'X') || arr[2][2] == 'X' && arr[1][2] == 'X' || (arr[0][0] == 'O' && arr[0][1] == 'O') || (arr[2][0] == 'O' && arr[1][1] == 'O') || arr[2][2] == 'O' && arr[1][2] == 'O'){
                            rand1 = 0;
                            rand2 = 2;
                            arr[rand1][rand2] = 'O';
                            free = free - 1;

                            printGameField (arr);

                            finished = hasWon (free, arr, finished);

                        }else if (arr[1][0] == 'X' && arr[1][1] == 'X' || arr[0][2] == 'X' && arr[2][0] == 'X' || arr[1][0] == 'O' && arr[1][1] == 'O' || arr[0][2] == 'O' && arr[2][0] == 'O'){
                            rand1 = 1;
                            rand2 = 2;
                            arr[rand1][rand2] = 'O';
                            free = free - 1;

                            printGameField (arr);

                            finished = hasWon (free, arr, finished);
                        }else if (arr[2][0] == 'X' && arr[2][1] == 'X' || arr[0][0] == 'X' && arr[1][1] == 'X' || arr[0][2] == 'X' && arr[1][2] == 'X' || arr[2][0] == 'O' && arr[2][1] == 'O' || arr[0][0] == 'O' && arr[1][1] == 'O' || arr[0][2] == 'O' && arr[1][2] == 'O'){
                            rand1 = 2;
                            rand2 = 2;
                            arr[rand1][rand2] = 'O';
                            free = free - 1;

                            printGameField (arr);

                            finished = hasWon (free, arr, finished);
                        }else if (arr[2][0] == 'X' && arr[2][2] == 'X' || arr[0][1] == 'X' && arr[1][1] == 'X' || arr[2][0] == 'O' && arr[2][2] == 'O' || arr[0][1] == 'O' && arr[1][1] == 'O'){
                            rand1 = 2;
                            rand2 = 1;
                            arr[rand1][rand2] = 'O';
                            free = free - 1;

                            printGameField (arr);

                            finished = hasWon (free, arr, finished);
                        }else if (arr[1][0] == 'X' && arr[1][2] == 'X' || arr[0][1] == 'X' && arr[2][1] == 'X' || arr[0][0] == 'X' && arr[2][2] == 'X' || arr[1][0] == 'O' && arr[1][2] == 'O' || arr[0][1] == 'O' && arr[2][1] == 'O' || arr[0][0] == 'O' && arr[2][2] == 'O'){
                            rand1 = 1;
                            rand2 = 1;
                            arr[rand1][rand2] = 'O';
                            free = free - 1;

                            printGameField (arr);

                            finished = hasWon (free, arr, finished);
                        }else if (arr[0][0] == 'X' && arr[0][2] == 'X' || arr[1][1] == 'X' && arr[2][1] == 'X' || arr[0][0] == 'O' && arr[0][2] == 'O' || arr[1][1] == 'O' && arr[2][1] == 'O'){
                            rand1 = 0;
                            rand2 = 1;
                            arr[rand1][rand2] = 'O';
                            free = free - 1;

                            printGameField (arr);

                            finished = hasWon (free, arr, finished);
                        }else if(arr[0][1] == 'X' && arr[0][2] == 'X' || arr[1][0] == 'X' && arr[2][0] == 'X' || arr[1][1] == 'X' && arr[2][2] == 'X' || arr[0][1] == 'O' && arr[0][2] == 'O' || arr[1][0] == 'O' && arr[2][0] == 'O' || arr[1][1] == 'O' && arr[2][2] == 'O'){
                            rand1 = 0;
                            rand2 = 0;
                            arr[rand1][rand2] = 'O';
                            free = free - 1;

                            printGameField (arr);

                            finished = hasWon (free, arr, finished);
                        }else if (arr[0][0] == 'X' && arr[2][0] == 'X' || arr[1][1] == 'X' && arr[1][2] == 'X' || arr[0][0] == 'O' && arr[2][0] == 'O' || arr[1][1] == 'O' && arr[1][2] == 'O'){
                            rand1 = 1;
                            rand2 = 0;
                            arr[rand1][rand2] = 'O';
                            free = free - 1;

                            printGameField (arr);

                            finished = hasWon (free, arr, finished);
                        }else if (arr[0][0] == 'X' && arr[1][0] == 'X' || arr[2][1] == 'X' && arr[2][2] == 'X' || arr[0][2] == 'X' && arr[1][1] == 'X' || arr[0][0] == 'O' && arr[1][0] == 'O' || arr[2][1] == 'O' && arr[2][2] == 'O' || arr[0][2] == 'O' && arr[1][1] == 'O'){
                            rand1 = 2;
                            rand2 = 0;
                            arr[rand1][rand2] = 'O';
                            free = free - 1;

                            printGameField (arr);

                            finished = hasWon (free, arr, finished);
                        } else {

                            rand1 = (int) (Math.random () * 3);
                            rand2 = (int) (Math.random () * 3);

                            arr[rand1][rand2] = 'O';
                            free = free - 1;

                            printGameField (arr);

                            finished = hasWon (free, arr, finished);
                        }

                    }

                    continue;
                }

                   if ("exit".equals (inputCommand)) {
                    gameOver = true;
                }
                    if (!("exit".equals (inputCommand)) && !("start user user".equals (inputCommand)) && !("start easy user".equals (inputCommand)) && !("start easy easy".equals(inputCommand)) && !("start user easy".equals(inputCommand)) && !("start user medium".equals (inputCommand)) && !("start medium user".equals (inputCommand))) {

                        System.out.println ("Bad parameters!");
                        continue;
                    }

                }
            }


        public static char[][] getGameField() {
            char[][] arr = new char[3][3];

            for (int i = 0; i < 3; i++) {
                for (int j = 0; j < 3; j++) {
                    arr[i][j] = ' ';
                }
            }
            return arr;
        }


        public static boolean hasWon(int free, char[][] arr, boolean finished) {
            if ((arr[0][2] == 'X' && arr[1][2] == 'X' && arr[2][2] == 'X' || arr[0][1] == 'X' && arr[1][1] == 'X' && arr[2][1] == 'X' || arr[0][0] == 'X' && arr[1][0] == 'X' && arr[2][0] == 'X' || arr[0][2] == 'X' && arr[0][1] == 'X' && arr[0][0] == 'X' || arr[1][2] == 'X' && arr[1][1] == 'X' && arr[1][0] == 'X' || arr[0][2] == 'X' && arr[1][1] == 'X' && arr[2][0] == 'X' || arr[0][0] == 'X' && arr[1][1] == 'X' && arr[2][2] == 'X')) {
                System.out.println ("X wins");
                finished = true;
            } else if ((arr[0][2] == 'O' && arr[1][2] == 'O' && arr[2][2] == 'O' || arr[0][1] == 'O' && arr[1][1] == 'O' && arr[2][1] == 'O' || arr[0][0] == 'O' && arr[1][0] == 'O' && arr[2][0] == 'O' || arr[0][2] == 'O' && arr[0][1] == 'O' && arr[0][0] == 'O' || arr[1][2] == 'O' && arr[1][1] == 'O' && arr[1][0] == 'O' || arr[0][2] == 'O' && arr[1][1] == 'O' && arr[2][0] == 'O' || arr[0][0] == 'O' && arr[1][1] == 'O' && arr[2][2] == 'O')) {
                System.out.println ("O wins");
                finished = true;
            } else {

                if (free == 0) {
                    System.out.println ("Draw");
                    finished = true;
                }

            }
            return finished;
        }


        public static void printGameField(char[][] arr) {
            System.out.println ("---------");
            System.out.println ("|" + " " + arr[0][0] + " " + arr[0][1] + " " + arr[0][2] + " " + "|");
            System.out.println ("|" + " " + arr[1][0] + " " + arr[1][1] + " " + arr[1][2] + " " + "|");
            System.out.println ("|" + " " + arr[2][0] + " " + arr[2][1] + " " + arr[2][2] + " " + "|");
            System.out.println ("---------");
        }


        public static int getX(String s) {
            int x = 0;
            if (s.contains (" ")) {
                String[] str = s.split (" ");
                if ("1".equals (str[0])) {
                    x = 0;
                } else if ("2".equals (str[0])) {
                    x = 1;
                } else if ("3".equals (str[0])) {
                    x = 2;
                } else if (!(str[0].matches ("-?\\d+")) || !(str[1].matches ("-?\\d+"))) {
                    System.out.println ("You should enter numbers!");
                    System.out.println ("Enter the coordinates:");
                } else {
                    System.out.println ("Coordinates should be from 1 to 3!");
                    System.out.println ("Enter the coordinates:");
                }
            } else {
                System.out.println ("You should enter numbers!");
                System.out.println ("Enter the coordinates:");
            }


            return x;
        }

        public static int getY(String s) {
            int y = 0;
            if (s.contains (" ")) {
                String[] str = s.split (" ");

                if ("1".equals (str[1])) {
                    y = 0;
                } else if ("2".equals (str[1])) {
                    y = 1;
                } else if ("3".equals (str[1])) {
                    y = 2;
                } else if (!(str[1].matches ("-?\\d+")) || !(str[0].matches ("-?\\d+"))) {
                    System.out.println ("You should enter numbers!");
                    System.out.println ("Enter the coordinates:");
                } else {
                    System.out.println ("Coordinates should be from 1 to 3!");
                    System.out.println ("Enter the coordinates:");
                }
            } else {
                System.out.println ("You should enter numbers!");
                System.out.println ("Enter the coordinates:");
            }


            return y;
        }


    }
  learner_created: false
- name: test/TicTacToeTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;

    import java.util.List;


    public class TicTacToeTest extends StageTest<String> {

        int[] easyAiMoves = new int[9];

        @DynamicTest(order = 0)
        CheckResult testBadParameters() {

            TestedProgram program = new TestedProgram();
            program.start();

            String output = program.execute("start");
            if (!output.toLowerCase().contains("bad parameters")) {
                return CheckResult.wrong("After entering start command with wrong parameters you should print 'Bad parameters!' and ask to enter a command again!");
            }

            output = program.execute("start easy");
            if (!output.toLowerCase().contains("bad parameters")) {
                return CheckResult.wrong("After entering start command with wrong parameters you should print 'Bad parameters!' and ask to enter a command again!");
            }

            program.execute("exit");

            if (!program.isFinished()) {
                return CheckResult.wrong("After entering 'exit' command you should stop the program!");
            }

            return CheckResult.correct();
        }


        @DynamicTest(order = 1)
        CheckResult testGridOutput() {

            TestedProgram program = new TestedProgram();

            program.start();

            String output = program.execute("start user easy");

            Grid printedGrid = Grid.fromOutput(output);
            Grid emptyGrid = Grid.fromLine("_________");

            if (!printedGrid.equals(emptyGrid)) {
                return CheckResult.wrong("After starting the program you should print an empty grid!\n" +
                    "Correct empty grid:\n" + emptyGrid);
            }

            if (!output.toLowerCase().contains("enter the coordinates:")) {
                return CheckResult.wrong("After printing an empty grid you should ask to enter cell coordinates!");
            }

            output = program.execute("2 2");

            Grid gridAfterMove = Grid.fromOutput(output);
            Grid correctGridAfterMove = Grid.fromLine("____X____");

            if (!gridAfterMove.equals(correctGridAfterMove)) {
                return CheckResult.wrong("After making the move wrong grid was printed.\n" +
                    "Your grid:\n" + gridAfterMove + "\n" +
                    "Correct grid:\n" + correctGridAfterMove);
            }

            if (!output.toLowerCase().replace("'", "\"").contains("making move level \"easy\"")) {
                return CheckResult.wrong("After entering a cell coordinates you should print:\nMaking move level \"easy\"");
            }

            Grid gridAfterAiMove = Grid.fromOutput(output, 2);

            if (gridAfterAiMove.equals(gridAfterMove)) {
                return CheckResult.wrong("After AI move grid wasn't changed!");
            }

            Grid gameGrid = gridAfterAiMove;

            while (true) {
                if (gameGrid.getGameState() != GameState.NOT_FINISHED) {
                    switch (gameGrid.getGameState()) {
                        case X_WIN:
                            if (!output.contains("X wins")) {
                                return CheckResult.wrong("You should print 'X wins' if X win the game");
                            }
                            break;
                        case O_WIN:
                            if (!output.contains("O wins")) {
                                return CheckResult.wrong("You should print 'O wins' if O win the game");
                            }
                            break;
                        case DRAW:
                            if (!output.contains("Draw")) {
                                return CheckResult.wrong("You should print 'Draw' if the game ends with draw!");
                            }
                            break;
                    }
                    break;
                }
                Position nextMove = Minimax.getMove(gameGrid, CellState.X);

                Grid tempGrid = gameGrid.copy();
                tempGrid.setCell(nextMove.x, nextMove.y, CellState.X);

                output = program.execute((nextMove.x + 1) + " " + (nextMove.y + 1));

                gameGrid = Grid.fromOutput(output);

                if (!gameGrid.equals(tempGrid)) {
                    return CheckResult.wrong("After making move (" + nextMove + ") the game grid is wrong!\n" +
                        "Your gird\n" + gameGrid + "\n" +
                        "Correct grid\n" + tempGrid);
                }

                if (gameGrid.getGameState() != GameState.NOT_FINISHED)
                    continue;

                gameGrid = Grid.fromOutput(output, 2);
            }

            return CheckResult.correct();
        }

        @DynamicTest(repeat = 100, order = 2)
        CheckResult checkEasyAi() {
            TestedProgram program = new TestedProgram();
            program.start();

            program.execute("start user easy");

            String output = program.execute("2 2");

            Grid gridAfterAiMove = Grid.fromOutput(output, 2);

            CellState[][] array = gridAfterAiMove.getGrid();

            for (int i = 0; i < 9; i++) {
                if (i == 4) {
                    continue;
                }
                if (array[i / 3][i % 3] == CellState.O) {
                    easyAiMoves[i]++;
                }
            }

            return CheckResult.correct();
        }

        @DynamicTest(order = 3)
        CheckResult checkRandom() {
            double averageScore = 0;

            for (int i = 0; i < easyAiMoves.length; i++) {
                averageScore += (i + 1) * easyAiMoves[i];
            }

            averageScore /= 8;

            double expectedValue = (double) (1 + 2 + 3 + 4 + 6 + 7 + 8 + 9) * 100 / 8 / 8;

            if (Math.abs(averageScore - expectedValue) > 20) {
                return CheckResult.wrong("Looks like your Easy level AI doesn't make a random move!");
            }

            return CheckResult.correct();
        }

        boolean isEasyNotMovingLikeMedium = false;

        @DynamicTest(repeat = 30, order = 4)
        CheckResult checkEasyNotMovingLikeMedium() {

            if (isEasyNotMovingLikeMedium) {
                return CheckResult.correct();
            }

            TestedProgram program = new TestedProgram();
            program.start();
            program.execute("start user easy");

            String output = program.execute("2 2");

            Grid gameGrid = Grid.fromOutput(output, 2);

            CellState[][] cellStates = gameGrid.getGrid();

            if (cellStates[0][0] == CellState.EMPTY && cellStates[2][2] == CellState.EMPTY) {
                output = program.execute("1 1");
                gameGrid = Grid.fromOutput(output, 2);
                if (gameGrid.getGrid()[2][2] == CellState.EMPTY) {
                    isEasyNotMovingLikeMedium = true;
                }
            } else {
                output = program.execute("1 3");
                gameGrid = Grid.fromOutput(output, 2);
                if (gameGrid.getGrid()[2][0] == CellState.EMPTY) {
                    isEasyNotMovingLikeMedium = true;
                }
            }

            program.stop();
            return CheckResult.correct();
        }

        @DynamicTest(order = 5)
        CheckResult checkEasyNotMovingLikeMediumAfter() {
            if (!isEasyNotMovingLikeMedium) {
                return CheckResult.wrong("Looks like your Easy level AI doesn't make a random move!");
            }
            return CheckResult.correct();
        }

        @DynamicTest(order = 6)
        CheckResult checkEasyVsEasy() {

            TestedProgram program = new TestedProgram();
            program.start();

            String output = program.execute("start easy easy");

            List<Grid> gridList = Grid.allGridsFromOutput(output);

            Grid.checkGridSequence(gridList);

            return CheckResult.correct();
        }

        @DynamicTest(repeat = 10, order = 7)
        CheckResult checkMediumAi() {
            TestedProgram program = new TestedProgram();
            program.start();
            program.execute("start user medium");

            String output = program.execute("2 2");

            Grid gameGrid = Grid.fromOutput(output, 2);

            CellState[][] cellStates = gameGrid.getGrid();

            if (cellStates[0][0] == CellState.EMPTY && cellStates[2][2] == CellState.EMPTY) {
                output = program.execute("1 1");
                gameGrid = Grid.fromOutput(output, 2);
                if (gameGrid.getGrid()[2][2] == CellState.EMPTY) {
                    return CheckResult.wrong("Looks like your Medium level AI doesn't make a correct move!");
                }
            } else {
                output = program.execute("1 3");
                gameGrid = Grid.fromOutput(output, 2);
                if (gameGrid.getGrid()[2][0] == CellState.EMPTY) {
                    return CheckResult.wrong("Looks like your Medium level AI doesn't make a correct move!");
                }
            }
            program.stop();

            return CheckResult.correct();
        }

        @DynamicTest(order = 8, repeat = 5)
        CheckResult checkMediumVsMedium() {

            TestedProgram program = new TestedProgram();
            program.start();

            String output = program.execute("start medium medium");

            List<Grid> gridList = Grid.allGridsFromOutput(output);

            Grid.checkGridSequence(gridList);

            return CheckResult.correct();
        }

        boolean isMediumNotMovingLikeHard = false;

        @DynamicTest(repeat = 30, order = 9)
        CheckResult checkMediumNotMovingLikeHard() {

            if (isMediumNotMovingLikeHard) {
                return CheckResult.correct();
            }

            TestedProgram program = new TestedProgram();
            program.start();

            program.execute("start user medium");

            String output = program.execute("2 2");

            Grid userMoveGrid = Grid.fromOutput(output, 1);
            Grid mediumMoveGrid = Grid.fromOutput(output, 2);

            Position mediumMove = Grid.getMove(userMoveGrid, mediumMoveGrid);

            List<Position> minimaxCorrectPositions = Minimax.getAvailablePositions(userMoveGrid, CellState.O);

            if (!minimaxCorrectPositions.contains(mediumMove)) {
                isMediumNotMovingLikeHard = true;
            }

            return CheckResult.correct();
        }

        @DynamicTest(order = 10)
        CheckResult checkMediumNotMovingLikeHardAfter() {
            if (!isMediumNotMovingLikeHard) {
                return CheckResult.wrong("Looks like Medium level AI doesn't make a random move!");
            }
            return CheckResult.correct();
        }

        @DynamicTest(order = 11)
        CheckResult checkHardAi() {

            TestedProgram program = new TestedProgram();
            program.start();

            String output = program.execute("start user hard");
            Grid grid = Grid.fromOutput(output);
            Position nextMove = Minimax.getMove(grid, CellState.X);
            output = program.execute((nextMove.x + 1) + " " + (nextMove.y + 1));

            while (!output.toLowerCase().contains("win") && !output.toLowerCase().contains("draw")) {
                Grid gridAfterUserMove = Grid.fromOutput(output);
                Grid gridAfterAiMove = Grid.fromOutput(output, 2);
                Position aiMove = Grid.getMove(gridAfterUserMove, gridAfterAiMove);

                List<Position> correctMinimaxMovePositions = Minimax.getAvailablePositions(gridAfterUserMove, CellState.O);
                if (!correctMinimaxMovePositions.contains(aiMove)) {
                    return CheckResult.wrong("Your minimax algorithm is wrong! It chooses wrong positions to make a move!");
                }

                nextMove = Minimax.getMove(gridAfterAiMove, CellState.X);

                output = program.execute((nextMove.x + 1) + " " + (nextMove.y + 1));
            }

            return CheckResult.correct();
        }

        @DynamicTest(repeat = 5, order = 12)
        CheckResult checkHardVsHard() {

            TestedProgram program = new TestedProgram();
            program.start();

            String output = program.execute("start hard hard");

            if (!output.toLowerCase().contains("draw")) {
                return CheckResult.wrong("The result of the game between minimax algorithms should be always 'Draw'!\n" +
                    "Make sure your output contains 'Draw'.");
            }

            return CheckResult.correct();
        }
    }
  learner_created: false
feedback_link: https://hyperskill.org/projects/81/stages/451/implement#comment
status: Solved
record: 4
